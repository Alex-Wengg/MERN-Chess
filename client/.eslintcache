[{"/home/han/Documents/websites/mern/client/src/index.js":"1","/home/han/Documents/websites/mern/client/src/App.js":"2","/home/han/Documents/websites/mern/client/src/reportWebVitals.js":"3","/home/han/Documents/websites/mern/client/src/Components/Container.js":"4","/home/han/Documents/websites/mern/client/src/Components/Header.jsx":"5","/home/han/Documents/websites/mern/client/src/Components/WeatherForm.jsx":"6","/home/han/Documents/websites/mern/client/src/Components/WeatherPanels.jsx":"7","/home/han/Documents/websites/mern/client/src/Components/WeatherInfoPanel.jsx":"8","/home/han/Documents/websites/mern/client/src/Components/WeatherHistoryPanel.jsx":"9","/home/han/Documents/websites/mern/client/src/reducers/index.js":"10","/home/han/Documents/websites/mern/client/src/reducers/weather.js":"11","/home/han/Documents/websites/mern/client/src/reducers/zipCode.js":"12","/home/han/Documents/websites/mern/client/src/reducers/temperature.js":"13","/home/han/Documents/websites/mern/client/src/reducers/history.js":"14","/home/han/Documents/websites/mern/client/src/actions/index.js":"15"},{"size":742,"mtime":1610762496715,"results":"16","hashOfConfig":"17"},{"size":279,"mtime":1610596631431,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1610592479075,"results":"19","hashOfConfig":"17"},{"size":462,"mtime":1610596176658,"results":"20","hashOfConfig":"17"},{"size":398,"mtime":1610594669194,"results":"21","hashOfConfig":"17"},{"size":5815,"mtime":1610814812895,"results":"22","hashOfConfig":"17"},{"size":417,"mtime":1610594753398,"results":"23","hashOfConfig":"17"},{"size":2112,"mtime":1610814632330,"results":"24","hashOfConfig":"17"},{"size":1353,"mtime":1610814666163,"results":"25","hashOfConfig":"17"},{"size":271,"mtime":1610762192492,"results":"26","hashOfConfig":"17"},{"size":430,"mtime":1610762228045,"results":"27","hashOfConfig":"17"},{"size":240,"mtime":1610762241429,"results":"28","hashOfConfig":"17"},{"size":286,"mtime":1610762212796,"results":"29","hashOfConfig":"17"},{"size":714,"mtime":1610762176464,"results":"30","hashOfConfig":"17"},{"size":473,"mtime":1610762012191,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1oknkkc",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/home/han/Documents/websites/mern/client/src/index.js",[],["65","66"],"/home/han/Documents/websites/mern/client/src/App.js",[],"/home/han/Documents/websites/mern/client/src/reportWebVitals.js",[],"/home/han/Documents/websites/mern/client/src/Components/Container.js",[],"/home/han/Documents/websites/mern/client/src/Components/Header.jsx",[],"/home/han/Documents/websites/mern/client/src/Components/WeatherForm.jsx",["67"],"import React, {Component} from \"react\";\nimport {Form, Button, Row, Col, ButtonGroup, ToggleButton} from \"react-bootstrap\";\n\nimport axios from 'axios';\n\nimport {connect} from \"react-redux\";\nimport {saveZipCode, saveWeatherData, saveTemperature, updateHistory} from \"../actions\";\n\nclass WeatherForm extends Component {\n    // default state values\n    state = {\n        tempMetric: \"imperial\",\n        zipCodeInput: \"98052\"\n    }\n\n    componentDidMount() {\n        this.refreshSavedWeather();\n    }\n\n    // Refreshes the current weather data for the most recent zip code, if it exists\n    refreshSavedWeather = () => {\n        if (localStorage.getItem(\"zipCode\")) {\n            axios.post(\"/api/weather\", {\n                zipCode: localStorage.getItem(\"zipCode\"),\n                tempMetric: localStorage.getItem(\"tempMetric\")\n            }).then(d => {\n                localStorage.setItem(\"CurrentWeatherData\", JSON.stringify(d.data));\n                this.props.saveWeatherData(d.data);\n            });\n        }\n    }\n\n    onChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    saveFormData = (event) => {\n        event.preventDefault();\n\n        // Gets the weather data from the weather api and returns it to save into local storage and redux store.\n        axios.post(\"/api/weather\", {\n            zipCode: this.state.zipCodeInput,\n            tempMetric: this.state.tempMetric\n        }).then(response => {\n            let weatherData = response.data;\n\n            this.saveToStore(weatherData);\n            this.saveToLocalStorage(weatherData);\n        });\n    }\n\n    // Save data from form to local storage\n    saveToLocalStorage = (weatherData) => {\n        localStorage.setItem(\"zipCode\", this.state.zipCodeInput);\n        localStorage.setItem(\"tempMetric\", this.state.tempMetric);\n        localStorage.setItem(\"CurrentWeatherData\", JSON.stringify(weatherData));\n        localStorage.setItem(\"WeatherHistory\", JSON.stringify(this.props.history));\n    }\n\n    saveToMongo = (event) => {\n        axios.post(\"/api/weatherMongo\", {\n            zipCode: this.state.zipCodeInput,\n            tempMetric: this.state.tempMetric\n        }).then(response => {\n            let weatherData = response.data;\n\n            // do whatever you want with the weather data\n        });\n    }\n\n    // Saves data to the Redux store\n    saveToStore = (weatherData) => {\n        this.props.saveTemperature(this.state.tempMetric);\n        this.props.saveZipCode(this.state.zipCodeInput);\n        this.props.saveWeatherData(weatherData);\n\n        this.props.updateHistory({\n            timestamp: (new Date()).toLocaleString(),\n            city: weatherData.name,\n            zipcode: this.state.zipCodeInput,\n            temperature: weatherData.main.temp,\n            description: weatherData.weather[0].description\n        });\n    }\n\n    render() {\n        return (\n            <Form className=\"weather-form\" onSubmit={this.saveFormData}>\n\n                <Row type=\"flex\" justify=\"center\" align=\"center\" className=\"zipCode\">\n                    <Col>\n                        <span>Zip Code: </span>\n                        <Form.Control name=\"zipCodeInput\"\n                                      type=\"text\"\n                                      placeholder=\"Enter your zip code\"\n                                      onChange={this.onChange}\n                                      className=\"zipCodeInput\"/>\n                    </Col>\n                </Row>\n\n                <Row type=\"flex\" justify=\"center\" align=\"center\">\n                    <Col span={4}>\n                        <ButtonGroup toggle>\n                            <ToggleButton\n                                key={\"C\"}\n                                type=\"radio\"\n                                variant=\"secondary\"\n                                name=\"tempMetric\"\n                                value={\"metric\"}\n                                checked={this.state.tempMetric === \"metric\"}\n                                onChange={this.onChange}\n                            >\n                                Celsius (°C)\n                            </ToggleButton>\n                            <ToggleButton\n                                key={\"F\"}\n                                type=\"radio\"\n                                variant=\"secondary\"\n                                name=\"tempMetric\"\n                                value={\"imperial\"}\n                                checked={this.state.tempMetric === \"imperial\"}\n                                onChange={this.onChange}\n                            >\n                                Fahrenheit (°F)\n                            </ToggleButton>\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n\n                <Row type=\"flex\" justify=\"center\" align=\"center\">\n                    <Col span={4}>\n                        <Button className=\"save-btn\" variant=\"primary\" type=\"submit\">\n                            Save\n                        </Button>\n                    </Col>\n                </Row>\n\n            </Form>\n        );\n    }\n}\n\n// Mapping state from the store to props;\n// meaning...if we update these props, it'll update the redux store\nconst mapStateToProps = (state) => {\n    return {\n        zipCode: state.zipCode,\n        weather: state.weather,\n        tempMetric: state.tempMetric,\n        history: state.history\n    }\n};\n\n// These are the actions we can dispatch and just mapping it to props\nconst mapDispatchToProps = () => {\n    return {\n        saveZipCode,\n        saveWeatherData,\n        saveTemperature,\n        updateHistory\n    }\n};\n\n// This connects our mapping the state & dispatch to props to use in WeatherForm\nexport default connect(mapStateToProps, mapDispatchToProps())(WeatherForm);","/home/han/Documents/websites/mern/client/src/Components/WeatherPanels.jsx",[],"/home/han/Documents/websites/mern/client/src/Components/WeatherInfoPanel.jsx",[],"/home/han/Documents/websites/mern/client/src/Components/WeatherHistoryPanel.jsx",[],"/home/han/Documents/websites/mern/client/src/reducers/index.js",[],"/home/han/Documents/websites/mern/client/src/reducers/weather.js",[],"/home/han/Documents/websites/mern/client/src/reducers/zipCode.js",[],"/home/han/Documents/websites/mern/client/src/reducers/temperature.js",[],"/home/han/Documents/websites/mern/client/src/reducers/history.js",[],"/home/han/Documents/websites/mern/client/src/actions/index.js",[],["68","69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":65,"column":17,"nodeType":"76","messageId":"77","endLine":65,"endColumn":28},{"ruleId":"70","replacedBy":"78"},{"ruleId":"72","replacedBy":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'weatherData' is assigned a value but never used.","Identifier","unusedVar",["80"],["81"],"no-global-assign","no-unsafe-negation"]